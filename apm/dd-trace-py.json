{
  "url": "https://api.github.com/repos/DataDog/dd-trace-py/releases/240025268",
  "assets_url": "https://api.github.com/repos/DataDog/dd-trace-py/releases/240025268/assets",
  "upload_url": "https://uploads.github.com/repos/DataDog/dd-trace-py/releases/240025268/assets{?name,label}",
  "html_url": "https://github.com/DataDog/dd-trace-py/releases/tag/v3.12.0",
  "id": 240025268,
  "author": {
    "login": "emmettbutler",
    "id": 723615,
    "node_id": "MDQ6VXNlcjcyMzYxNQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/723615?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/emmettbutler",
    "html_url": "https://github.com/emmettbutler",
    "followers_url": "https://api.github.com/users/emmettbutler/followers",
    "following_url": "https://api.github.com/users/emmettbutler/following{/other_user}",
    "gists_url": "https://api.github.com/users/emmettbutler/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/emmettbutler/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/emmettbutler/subscriptions",
    "organizations_url": "https://api.github.com/users/emmettbutler/orgs",
    "repos_url": "https://api.github.com/users/emmettbutler/repos",
    "events_url": "https://api.github.com/users/emmettbutler/events{/privacy}",
    "received_events_url": "https://api.github.com/users/emmettbutler/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "node_id": "RE_kwDOA6uE5s4OTn60",
  "tag_name": "v3.12.0",
  "target_commitish": "303084d5533a00cc2eb85d3aa98030670ea8d15b",
  "name": "3.12.0",
  "draft": false,
  "immutable": false,
  "prerelease": false,
  "created_at": "2025-08-13T17:51:02Z",
  "updated_at": "2025-08-14T16:34:31Z",
  "published_at": "2025-08-14T16:34:31Z",
  "assets": [

  ],
  "tarball_url": "https://api.github.com/repos/DataDog/dd-trace-py/tarball/v3.12.0",
  "zipball_url": "https://api.github.com/repos/DataDog/dd-trace-py/zipball/v3.12.0",
  "body": "Estimated end-of-life date, accurate to within three months: 08-2026\r\nSee [the support level definitions](https://docs.datadoghq.com/tracing/trace_collection/compatibility/python/#releases) for more information.\r\n\r\n### Prelude\r\n\r\nAI Guard is an upcoming Datadog security product currently under active design and development. Note: The Python SDK is released as a technical preview. Functionality and APIs are subject to change, and backward compatibility is not guaranteed at this stage.\r\n\r\n### Upgrade Notes\r\n\r\n- profiling: timeline view is now enabled by default (`DD_PROFILING_TIMELINE_ENABLED=True`). This provides visualization of profiling data with timing information.\r\n\r\n### Deprecation Notes\r\n\r\n- tracing\r\n  - `ddtrace.settings.__init__` imports are deprecated and will be removed in version 4.0.0.\r\n  - Deprecate the non_active_span parameter in the `HTTPPropagator.inject` method. `HTTPPropagator.inject(context=...)` should be used to inject headers instead.\r\n- profiling: Windows support is removed. Please file an issue if you want this reverted.\r\n\r\n### New Features\r\n\r\n- App and API Protection (AAP): Introduce a public Python SDK that provides programmatic access to AI Guardâ€™s public endpoint.\r\n- asgi: Adds tracing on websocket spans with `DD_TRACE_WEBSOCKET_MESSAGES_ENABLED`, which replaces `DD_TRACE_WEBSOCKET_MESSAGES`.\r\n- CI Visibility: This introduces an alternative method for collecting and sending test spans. In this mode, the `CIVisibility` tracer is kept separate from the global `ddtrace` tracer, which helps avoid interference between test and non-test tracer configurations. This mode is currently experimental, and can be enabled by setting the environment variable `DD_CIVISIBILITY_USE_BETA_WRITER` to `true`.\r\n- crewai: Introduces APM and LLM Observability tracing support for CrewAI Flow `kickoff/kickoff_async` calls, including tracing internal flow method execution.\r\n- LLM Observability\r\n  - Adds support for collecting tool definitions, tool calls and tool results in the Anthropic integration.\r\n  - Increases span event size limit from 1MB to 5MB.\r\n  - Records agent manifest information for LangGraph compiled graphs.\r\n  - add ability to drop spans by having a `SpanProcessor` return `None`.\r\n  - mcp: Adds distributed tracing support for MCP tool calls across client-server boundaries by default.\r\n    To disable distributed tracing for mcp, set the configuration: `DD_MCP_DISTRIBUTED_TRACING=False` for both the client and server.\r\n\r\n### Bug Fixes\r\n\r\n- AAP\r\n  - resolves a bug where ASGI middleware would not catch the BlockingException raised by AAP because it was aggregated in an ExceptionGroup\r\n  - This fix resolves an issue where a malformed package would prevent reporting of other correctly formed packages to Software Composition Analysis\r\n  - This fix resolves an issue where the `route` parameter was not being correctly handled in the Django path function.\r\n- CI Visibility: This fix resolves an issue where using the pytest `skipif` marker with the condition passed as a keyword argument (or not provided at all) would cause the test to be reported as failed, in particular when the `flaky` or `pytest-rerunfailures` were also used.\r\n- ddtrace_api: Fixes a bug in the ddtrace_api integration in which `patch()` with no arguments, and thus `patch_all()`, breaks the integration.\r\n- django: fix incorrect component tag being set for django orm spans\r\n- dynamic instrumentation: extended captured value redaction in mappings with keys of type `bytes`.\r\n- openai: Resolves an issue where an uninitialized `OpenAI/AsyncOpenAI` client would result in an `AttributeError`.\r\n- pydantic_ai: This fix resolves an issue where enabling the Pydantic AI for `pydantic-ai-slim >= 0.4.4` would fail. See `this issue <https://github.com/DataDog/dd-trace-py/issues/14161>`\\_ for more details.\r\n- tracing\r\n  - Resolves an issue where sampling rules with null values for service, resource, or name would not match any spans, since these fields are always exported as strings and never null. Now, null and unset fields are treated the same. Ex: `DD_TRACE_SAMPLING_RULES='\\[{\"resource\": null, \"sample_rate\": 1}\\]'` will be equivalent to `DD_TRACE_SAMPLING_RULES='\\[{\"sample_rate\": 1}\\]'`.\r\n  - Fix inconsistent trace sampling during partial flush (traces \\>300 spans). Now correctly applies sampling rules to the root span instead of a random payload span. Since traces are sampled only once, using the wrong span could bypass sampling rules and cause the agent to apply default rate limits. Fixes regression introduced in v2.8.0.\r\n- kafka: This fix resolves an issue where the `list_topics` call in the Kafka integration could hang indefinitely. The integration now sets a 1-second timeout on `list_topics</span> calls and caches both successful cluster ID results and failures (with a 5-minute retry interval) to prevent repeated slow metadata queries.\r\n- Code Security (IAST): Fixes Gevent worker timeouts by preloading IAST early and refactoring taint sink initialization to remove legacy import-based triggers, ensuring reliable instrumentation.\r\n- LLM Observability\r\n  - Fixes a bug where code execution outputs done through `google-genai` would result in no output messages on the LLM Observability `llm` span.\r\n  - langgraph: resolves `ModuleNotFoundError` errors when patching `langgraph>=0.6.0`\r\n  - openai: fixed an issue when using the openai responses api with `openai>=1.66.0,<1.66.2` would result in an `AttributeError`.\r\n- Remote Config: Eagerly query Remote Config upon process startup to ensure timely configuration updates.\r\n- Flares: Fixes to make the tracer flares match the spec.\r\n\r\n### Other Changes\r\n\r\n- tracing: Improves debug logging in `HTTPPropagator.inject` method to help diagnose issues with sampling decisions.\r\n- profiling: removed redundant sampling code from memory profile, improving overhead and accuracy. Sizes and counts of objects allocated since the last profile are now reported more accurately. ENV: `DD_PROFILING_MAX_EVENTS` is deprecated and does nothing. Use `DD_PROFILING_HEAP_SAMPLE_SIZE` to control sampling frequency of the memory profiler.",
  "reactions": {
    "url": "https://api.github.com/repos/DataDog/dd-trace-py/releases/240025268/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 1,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  }
}
