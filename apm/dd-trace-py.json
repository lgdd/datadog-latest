{
  "url": "https://api.github.com/repos/DataDog/dd-trace-py/releases/229735144",
  "assets_url": "https://api.github.com/repos/DataDog/dd-trace-py/releases/229735144/assets",
  "upload_url": "https://uploads.github.com/repos/DataDog/dd-trace-py/releases/229735144/assets{?name,label}",
  "html_url": "https://github.com/DataDog/dd-trace-py/releases/tag/v3.10.0",
  "id": 229735144,
  "author": {
    "login": "brettlangdon",
    "id": 1320353,
    "node_id": "MDQ6VXNlcjEzMjAzNTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1320353?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brettlangdon",
    "html_url": "https://github.com/brettlangdon",
    "followers_url": "https://api.github.com/users/brettlangdon/followers",
    "following_url": "https://api.github.com/users/brettlangdon/following{/other_user}",
    "gists_url": "https://api.github.com/users/brettlangdon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brettlangdon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brettlangdon/subscriptions",
    "organizations_url": "https://api.github.com/users/brettlangdon/orgs",
    "repos_url": "https://api.github.com/users/brettlangdon/repos",
    "events_url": "https://api.github.com/users/brettlangdon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brettlangdon/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "node_id": "RE_kwDOA6uE5s4NsXro",
  "tag_name": "v3.10.0",
  "target_commitish": "brettlangdon/3.10.0",
  "name": "3.10.0",
  "draft": false,
  "prerelease": false,
  "created_at": "2025-07-01T17:46:40Z",
  "published_at": "2025-07-03T18:42:03Z",
  "assets": [

  ],
  "tarball_url": "https://api.github.com/repos/DataDog/dd-trace-py/tarball/v3.10.0",
  "zipball_url": "https://api.github.com/repos/DataDog/dd-trace-py/zipball/v3.10.0",
  "body": "### Deprecation Notes\r\n\r\n- Dynamic Instrumentation:\r\n    - The `DD_DYNAMIC_INSTRUMENTATION_UPLOAD_FLUSH_INTERVAL` environment variable has been deprecated in favor of `DD_DYNAMIC_INSTRUMENTATION_UPLOAD_INTERVAL_SECONDS`. The old environment variable will be removed in a future major release.\r\n- Tracing\r\n    - The `escaped` and `timestamp` arguments in the `record_exception` method are deprecated and will be removed in version 4.0.0.\r\n\r\n### New Features\r\n\r\n- DSM:\r\n    - Add flag in set_consume_checkpoint() to indicate if DSM checkpoint was manually set.\r\n- Tracing:\r\n    - Adds the environment variable `DD_RUNTIME_METRICS_RUNTIME_ID_ENABLED` to enable runtime metrics for tagging runtime metrics with the current runtime ID. This is useful for tracking runtime metrics across multiple processes. Previously, this was `DD_TRACE_EXPERIMENTAL_RUNTIME_ID_ENABLED`.\r\n    - `azure_servicebus`: Add support for Azure Service Bus producers.\r\n    - `azure_functions`: Adds messaging span attributes for service bus triggers\r\n    - `azure_functions`: Add distributed tracing support for Service Bus triggers.\r\n    - `ddtrace-api`: Adds patching of `ddtrace_api.tracer.set_tags` to the `ddtrace_api` integration\r\n    - loguru,structlog,logbook:\r\n        - Enable trace-log correlation for structured loggers by default.\r\n        - Adds support for trace-log correlation via remote configuration. Previously, this functionality was only available for Python’s built-in logging library.\r\n- Dynamic Instrumentation:\r\n    - [Code Origins for Spans](https://docs.datadoghq.com/tracing/code_origins) is now automatically enabled when [Dynamic Instrumentation](https://docs.datadoghq.com/dynamic_instrumentation) is turned on.\r\n- LLM Observability:\r\n    - Introduces tracing support for bedrock-agent-runtime `invoke_agent` calls. If bedrock agents tracing is enabled, the internal bedrock traces will be converted and submitted as LLM Observability spans.\r\n    - Adds support for configuring proxy URLs for LLM Observability using the `DD_LLMOBS_INSTRUMENTED_PROXY_URLS` environment variable or by enabling LLM Observability with the `instrumented_proxy_urls` argument. Spans sent to a proxy URL will now show up as workflow spans instead of LLM spans.\r\n    - Adds LLM Observability tracing support for the OpenAI Responses endpoint.\r\n    - `google_genai`: Introduces tracing support for Google's Generative AI SDK for Python's `generate_content` and `generate_content_stream` methods.\r\n  See [the docs](https://ddtrace.readthedocs.io/en/stable/integrations.html#google-genai) for more information.\r\n    - `pydantic_ai`: Introduces tracing support for PydanticAI's `Agent.iter` and `Tool.run` methods.\r\n  See [the docs](https://ddtrace.readthedocs.io/en/stable/integrations.html#pydantic-ai) for more information.\r\n- CI Visibility:\r\n    - This introduces preliminary support to link children pytest-xdist tests (and test suites and test modules) to their parent sessions, instead of being sent as independent sessions.\r\n- Exception Replay:\r\n    - Added in-product enablement support.\r\n- Code Security (IAST):\r\n    - Handle IAST security controls custom validation and sanitization methods. See the [Security Controls](https://docs.datadoghq.com/security/code_security/iast/security_controls/) documentation for more information about this feature.\r\n- Profiling:\r\n    - Add gevent support to the new stack sampling mechanism (stack v2).\r\n- AAP:\r\n    - This introduces the WAF trace tagging feature. This feature enables Datadog’s security research team to efficiently gather API security findings without generating appsec events, which bypass tracer sampling mechanisms. As an example, trace-tagging rules can be used to add attributes to traces with details about the signing algorithm and expiration of a JWT token with the goal of providing authentication-related findings.\r\n\r\n### Bug Fixes\r\n\r\n- Tracing:\r\n    - algoliasearch: Fix for algoliasearch dangling reference.\r\n    - This resolves a `TypeError` in encoding when truncating a large bytes object.\r\n    - Resolves a sampling issue where agent-based sampling rates were not correctly applied after a process forked or the tracer was reconfigured.\r\n    - Resolves a bug where `os.system` or `subprocess.Popen` could return the wrong exception type.\r\n    - This fix resolves an issue in which traced nested generator functions had their execution order subtly changed in a way that affected the stack unwinding sequence during exception handling. The issue was caused by the tracer's use of simple iteration via `for v in g: yield v` during the wrapping of generator functions where full bidrectional communication with the sub-generator via `yield from g` was appropriate. See PEP380 for an explanation of how these two generator uses differ.\r\n    - This fix resolves an issue where the `@tracer.wrap()` decorator failed to preserve return values from generator functions, causing `StopIteration.value` to be `None` instead of the actual returned value.\r\n    - `rq`: Enable parsing distributed tracing metadata in perform job\r\n- AAP:\r\n    - This fix resolves an issue where track_user was generating additional unexpected security activity for customers.\r\n    - This fix resolves an issue where the new ATO SDK track_user was reporting differently email, name, scope and role of the tracked user.\r\n- CI Visibility:\r\n    - This fix resolves an issue where test spans would be left unfinished if the <span class=\"title-ref\">pytest_runtest_protocol</span> hook was overridden in <span class=\"title-ref\">conftest.py</span>, causing the corresponding module and suite to be unfinished as well.\r\n    - This fix resolves an issue where code coverage would not be enabled if ddtrace was enabled via the `PYTEST_ADDOPTS` environment variable.\r\n- azure_functions:\r\n    - This fix resolves an issue where functions throw an error on loading when the function_name decorator follows another decorator.\r\n- LLM Observability:\r\n    - This fix resolves an issue where modifying bedrock converse streamed chunks caused traced spans to show modified content.\r\n    - Resolved an issue where manual instrumentation would raise `DD_LLMOBS_ML_APP` missing errors when LLM Observability was disabled.\r\n    - litellm: This fix resolves an out of bounds error when handling streamed responses. This error occurred when the number of choices in a streamed response was not set as a keyword argument.\r\n    - Fixes an issue where the trace ID exported from `export_span` was incorrect.\r\n    - `langchain`: Resolved an `AttributeError` that could occur when async tasks are cancelled during agenerate calls.\r\n- Dynamic Instrumentation:\r\n    - Fixed an incompatibility issue with code origin that caused line probes on the entry point functions to fail to instrument.\r\n    - Fixed an issue with the instrumentation of the first line of an iteration block (e.g. for loops) that could have caused undefined behavior.\r\n    - Fixed an issue that prevented line probes from being instrumented on a line containing just the code `try:` for CPython 3.11 and later.\r\n  - Fixes an issue with the instrumentation of generators with Python 3.10.\r\n- Code Origin:\r\n    - Fixed a potential memory leak when collecting entry span location information.\r\n- Logging:\r\n    - Ensured that `ddtrace.tracer.get_log_correlation_context()` returns the expected log correlation attributes (e.g., `dd.trace_id`, `dd.span_id`, `dd.service` instead of `trace_id`, `span_id`, `service`). This change aligns the method's output with the attributes in [ddtrace log-correlation docs](https://docs.datadoghq.com/logs/log_collection/python/?tab=ddtrace#log-correlation).\r\n    - Fixed an issue where `ddtrace.tracer.get_log_correlation_context()` would return the service name of the current span instead of the global service name.\r\n\r\n### Other Changes\r\n\r\n- Tracing:\r\n    - Adds explicit support ranges for all integrations. These support ranges can be used in conjunction with <span class=\"title-ref\">DD_TRACE_SAFE_INSTRUMENTATION_ENABLED=true</span> to enable safer patching of integrations, by ensuring that only compatible versions of an integration are patched.\r\n- Profiling:\r\n    - The native profile exporter is now the default profile exporter, and the legacy Python exporter is removed. The `DD_PROFILING_EXPORT_LIBDD_ENABLED` configuration variable is removed. As a result of this change, profiling for 32-bit Linux is not supported. Please file an issue or open a support ticket if you need profiling for 32-bit Linux.\r\n\r\n- Single Step Instrumentation:\r\n    - Updates library injection guardrails to use safe instrumentation patching feature `DD_TRACE_SAFE_INSTRUMENTATION_ENABLED`. This change ensures that instrumentation patching is only applied to for supported versions of packages, leaving unsupported package versions unpatched.\r\n    - Additional fields have been added to the telemetry forwarder used during Single Step to surface troubleshooting insights in the Datadog UI."
}
