{
  "url": "https://api.github.com/repos/DataDog/dd-trace-py/releases/244897165",
  "assets_url": "https://api.github.com/repos/DataDog/dd-trace-py/releases/244897165/assets",
  "upload_url": "https://uploads.github.com/repos/DataDog/dd-trace-py/releases/244897165/assets{?name,label}",
  "html_url": "https://github.com/DataDog/dd-trace-py/releases/tag/v3.13.0",
  "id": 244897165,
  "author": {
    "login": "emmettbutler",
    "id": 723615,
    "node_id": "MDQ6VXNlcjcyMzYxNQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/723615?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/emmettbutler",
    "html_url": "https://github.com/emmettbutler",
    "followers_url": "https://api.github.com/users/emmettbutler/followers",
    "following_url": "https://api.github.com/users/emmettbutler/following{/other_user}",
    "gists_url": "https://api.github.com/users/emmettbutler/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/emmettbutler/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/emmettbutler/subscriptions",
    "organizations_url": "https://api.github.com/users/emmettbutler/orgs",
    "repos_url": "https://api.github.com/users/emmettbutler/repos",
    "events_url": "https://api.github.com/users/emmettbutler/events{/privacy}",
    "received_events_url": "https://api.github.com/users/emmettbutler/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "node_id": "RE_kwDOA6uE5s4OmNWN",
  "tag_name": "v3.13.0",
  "target_commitish": "3.13",
  "name": "3.13.0",
  "draft": false,
  "immutable": false,
  "prerelease": false,
  "created_at": "2025-09-04T18:44:21Z",
  "updated_at": "2025-09-04T19:27:09Z",
  "published_at": "2025-09-04T19:27:09Z",
  "assets": [

  ],
  "tarball_url": "https://api.github.com/repos/DataDog/dd-trace-py/tarball/v3.13.0",
  "zipball_url": "https://api.github.com/repos/DataDog/dd-trace-py/zipball/v3.13.0",
  "body": "Estimated end-of-life date, accurate to within three months: 08-2026\r\nSee [the support level definitions](https://docs.datadoghq.com/tracing/trace_collection/compatibility/python/#releases) for more information.\r\n\r\n\r\n### Deprecation Notes                                \r\n                                                                                                                                                                                                                    \r\n- tracing: `ddtrace.tracer.Pin` is deprecated and will be removed in version 4.0.0. To manage configuration of the tracer or integrations please use environment variables.\r\n                                                     \r\n### New Features                                     \r\n                                                                                                                                                                                                                    \r\n- opentelemetry\r\n  - Adds experimental support for exporting logs using the OTLP protocol. To enable this feature install the `opentelemetry-otlp-exporter` and set `DD_LOGS_OTEL_ENABLED=true`.\r\n  - Ensures that ddtrace log injection is disabled when OpenTelemetry logs are enabled (DD_LOGS_OTEL_ENABLED=true).\r\n- LLM Observability\r\n  - Adds support for collecting tool definitions, tool calls and tool results in the Amazon Bedrock integration.\r\n  - Adds support for collecting tool definitions, tool calls and tool results in the Google GenAI integration.\r\n  - This introduces support for tool calls and tool results in LLMObs message annotations when using custom instrumentation. The `LLMObs.annotate()` method now accept input and output data with optional `to\r\nol_calls` and `tool_results` fields for function calling scenarios.\r\n  - Adds support for collecting tool definitions, tool calls and tool results in the OpenAI integration.\r\n  - Adds support for collecting tool definitions, tool calls and tool results in the VertexAI integration.\r\n- Django: Added the `DD_DJANGO_ALWAYS_CREATE_DATABASE_SPANS` config option (default: `true`).                                              \r\n                                                                         \r\n  When enabled, the Django integration always generates a database span for every operation, even if the underlying database engine is already instrumented. This ensures complete coverage but may produce duplicat\r\ne spans and extra overhead.                                                                                                                                                                                         \r\n                                                                                                                                                                                                                    \r\n  When disabled, spans are only created if the database engine is not instrumented.\r\n\r\n  To avoid multiple spans per database call, we recommend disabling this option. `DD_DJANGO_ALWAYS_CREATE_DATABASE_SPANS=false`\r\n- AAP\r\n  - This introduces endpoint discovery for Flask applications. It allows the collection of API endpoints of a Flask application at startup.\r\n  - This introduces endpoint discovery for FastAPI applications. It allows the collection of API endpoints of a FastAPI application at startup.\r\n\r\n- ### Bug Fixes                                                                                                                                                                                                       \r\n                                                                                                                                                                                                                    \r\n- AAP: Fixes an issue where security signals would be incorrectly reported on an inferred proxy service instead of the current service.                                                                                                                                                                                                                                                                                               \r\n- CI Visibility: This fix resolves an issue where the `pytest` plugin would hold a reference to test exceptions beyond the end of the test, preventing them from being garbage-collected and increasing memory usage.\r\n- psycopg: This fix resolves a potential circular import with the psycopg3 contrib.                                                                          \r\n- internal: This fix resolves an issue where the tracer flare was not sent when `DD_TRACE_AGENT_URL` was not set, as the default URL was not used.                                                                                                                                                                                    \r\n- tracing\r\n  - Fixes issue with `websocket.receive` span not closing exactly when another `websocket.receive` span was opened.                                                                                          \r\n  - Fixes duration of websocket handshake span such that the handshake span closes when the connection is upgraded.\r\n  - Fix where `websocket.close` parent should be the handshake span when configuration is disabled. \r\n  - Resolves an issue where calling `ddtrace.trace.tracer.configure(...)` resets the trace writer buffer, causing spans to be dropped.\r\n- Code Security: Fixed a crash in the taint-aware modulo aspect when formatting SQLAlchemy objects whose `__repr__` can raise (e.g., inside complex CASE expressions).\r\n- LLM Observability: Properly parse `DD_TAGS` onto LLM Observability span events' tags.\r\n- sampling\r\n  - Fixed a bug where single span sampling rules were completely ignored when stats computation was enabled, causing all single-sampled spans to be dropped. Note that single span sampling is only used to \r\noverride trace sampling decisions to keep a span where the trace will be dropped.\r\n  - Removed automatic setting of local trace sampling rule tag (`_dd.p.dm=-3`) during distributed tracing header extraction.\r\n- ssi, crashtracker: This fix resolves an issue where crashtracker receiver binary was not available in an injected environment.\r\n\r\n### Other Changes\r\n\r\n- LLM Observability: add ability to override the URL origin.\r\n- openai: Removes I/O tags, including llm prompts, parameters, and token usage, from APM spans for OpenAI audio, image, and moderation requests."
}
